// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:              db,
		Categorie:       newCategorie(db, opts...),
		Comment:         newComment(db, opts...),
		CommentLike:     newCommentLike(db, opts...),
		Draft:           newDraft(db, opts...),
		Essay:           newEssay(db, opts...),
		Lark:            newLark(db, opts...),
		Plate:           newPlate(db, opts...),
		Post:            newPost(db, opts...),
		PostLike:        newPostLike(db, opts...),
		PostTag:         newPostTag(db, opts...),
		Tag:             newTag(db, opts...),
		Topic:           newTopic(db, opts...),
		TopicLike:       newTopicLike(db, opts...),
		UserInteraction: newUserInteraction(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Categorie       categorie
	Comment         comment
	CommentLike     commentLike
	Draft           draft
	Essay           essay
	Lark            lark
	Plate           plate
	Post            post
	PostLike        postLike
	PostTag         postTag
	Tag             tag
	Topic           topic
	TopicLike       topicLike
	UserInteraction userInteraction
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:              db,
		Categorie:       q.Categorie.clone(db),
		Comment:         q.Comment.clone(db),
		CommentLike:     q.CommentLike.clone(db),
		Draft:           q.Draft.clone(db),
		Essay:           q.Essay.clone(db),
		Lark:            q.Lark.clone(db),
		Plate:           q.Plate.clone(db),
		Post:            q.Post.clone(db),
		PostLike:        q.PostLike.clone(db),
		PostTag:         q.PostTag.clone(db),
		Tag:             q.Tag.clone(db),
		Topic:           q.Topic.clone(db),
		TopicLike:       q.TopicLike.clone(db),
		UserInteraction: q.UserInteraction.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:              db,
		Categorie:       q.Categorie.replaceDB(db),
		Comment:         q.Comment.replaceDB(db),
		CommentLike:     q.CommentLike.replaceDB(db),
		Draft:           q.Draft.replaceDB(db),
		Essay:           q.Essay.replaceDB(db),
		Lark:            q.Lark.replaceDB(db),
		Plate:           q.Plate.replaceDB(db),
		Post:            q.Post.replaceDB(db),
		PostLike:        q.PostLike.replaceDB(db),
		PostTag:         q.PostTag.replaceDB(db),
		Tag:             q.Tag.replaceDB(db),
		Topic:           q.Topic.replaceDB(db),
		TopicLike:       q.TopicLike.replaceDB(db),
		UserInteraction: q.UserInteraction.replaceDB(db),
	}
}

type queryCtx struct {
	Categorie       ICategorieDo
	Comment         ICommentDo
	CommentLike     ICommentLikeDo
	Draft           IDraftDo
	Essay           IEssayDo
	Lark            ILarkDo
	Plate           IPlateDo
	Post            IPostDo
	PostLike        IPostLikeDo
	PostTag         IPostTagDo
	Tag             ITagDo
	Topic           ITopicDo
	TopicLike       ITopicLikeDo
	UserInteraction IUserInteractionDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Categorie:       q.Categorie.WithContext(ctx),
		Comment:         q.Comment.WithContext(ctx),
		CommentLike:     q.CommentLike.WithContext(ctx),
		Draft:           q.Draft.WithContext(ctx),
		Essay:           q.Essay.WithContext(ctx),
		Lark:            q.Lark.WithContext(ctx),
		Plate:           q.Plate.WithContext(ctx),
		Post:            q.Post.WithContext(ctx),
		PostLike:        q.PostLike.WithContext(ctx),
		PostTag:         q.PostTag.WithContext(ctx),
		Tag:             q.Tag.WithContext(ctx),
		Topic:           q.Topic.WithContext(ctx),
		TopicLike:       q.TopicLike.WithContext(ctx),
		UserInteraction: q.UserInteraction.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
