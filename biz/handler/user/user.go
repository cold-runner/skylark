// Code generated by hertz generator.

package user

import (
	"context"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	service "github.com/cold-runner/skylark/biz/application/user"
	"github.com/cold-runner/skylark/biz/infrastructure/errCode"
	"github.com/cold-runner/skylark/biz/infrastructure/log"
	user "github.com/cold-runner/skylark/biz/model/user"
)

// Register .
// @router /register [POST]
func Register(ctx context.Context, c *app.RequestContext) {
	routerPath := string(c.URI().Path())

	hlog.Debugf(log.ROUTE_PATH, routerPath)

	var err error
	var req user.RegisterReq
	err = c.BindAndValidate(&req)
	if err != nil {
		errCode.ResponseValidationFailed(c, err)
		return
	}

	resp, err := service.Register(ctx, c, &req)
	if err != nil {
		errCode.ResponseFailed(c)
		hlog.Warnf(log.REQUEST_FAILED+log.EXTRA_ERROR_INFO, routerPath, c.Errors.Last())
		return
	}

	hlog.Debugf(log.REQUEST_SUCCESSFUL, routerPath)
	c.JSON(consts.StatusOK, resp)
}

// PasswordLogin .
// @router /login/password [GET]
func PasswordLogin(ctx context.Context, c *app.RequestContext) {
	routerPath := string(c.URI().Path())

	hlog.Debugf(log.ROUTE_PATH, routerPath)

	var err error
	var req user.PasswordLoginReq
	err = c.BindAndValidate(&req)
	if err != nil {
		errCode.ResponseValidationFailed(c, err)
		return
	}

	if err = service.PasswordLogin(ctx, c, &req); err != nil {
		errCode.ResponseFailed(c)
		hlog.Warnf(log.REQUEST_FAILED+log.EXTRA_ERROR_INFO, routerPath, c.Errors.Last())
		return
	}

	JwtMiddleware.LoginHandler(ctx, c)
	hlog.Debugf(log.REQUEST_SUCCESSFUL, routerPath)
}

// PhoneLogin .
// @router /login/phone [GET]
func PhoneLogin(ctx context.Context, c *app.RequestContext) {
	routerPath := string(c.URI().Path())

	hlog.Debugf(log.ROUTE_PATH, routerPath)

	var err error
	var req user.PhoneLoginReq
	err = c.BindAndValidate(&req)
	if err != nil {
		errCode.ResponseValidationFailed(c, err)
		return
	}

	if err = service.PhoneLogin(ctx, c, &req); err != nil {
		errCode.ResponseFailed(c)
		hlog.Warnf(log.REQUEST_FAILED+log.EXTRA_ERROR_INFO, routerPath, c.Errors.Last())
		return
	}

	JwtMiddleware.LoginHandler(ctx, c)
	hlog.Debugf(log.REQUEST_SUCCESSFUL, routerPath)
}

// SendSmsCode .
// @router /sendSmsCode [GET]
func SendSmsCode(ctx context.Context, c *app.RequestContext) {
	routerPath := string(c.URI().Path())

	hlog.Debugf(log.ROUTE_PATH, routerPath)

	var err error
	var req user.SendSmsCodeReq
	err = c.BindAndValidate(&req)
	if err != nil {
		errCode.ResponseValidationFailed(c, err)
		return
	}

	resp, err := service.SendSmsCode(ctx, c, &req)
	if err != nil {
		errCode.ResponseFailed(c)
		hlog.Warnf(log.REQUEST_FAILED+log.EXTRA_ERROR_INFO, routerPath, c.Errors.Last())
		return
	}

	hlog.Debugf(log.REQUEST_SUCCESSFUL, routerPath)
	c.JSON(consts.StatusOK, resp)
}

// GetUserInfoById .
// @router /user/getInfoById [GET]
func GetUserInfoById(ctx context.Context, c *app.RequestContext) {
	routerPath := string(c.URI().Path())

	hlog.Debugf(log.ROUTE_PATH, routerPath)

	var err error
	var req user.GetUserInfoByIdReq
	err = c.BindAndValidate(&req)
	if err != nil {
		errCode.ResponseValidationFailed(c, err)
		return
	}

	resp, err := service.GetUserInfo(ctx, c)
	if err != nil {
		errCode.ResponseFailed(c)
		hlog.Warnf(log.REQUEST_FAILED+log.EXTRA_ERROR_INFO, routerPath, c.Errors.Last())
		return
	}

	hlog.Debugf(log.REQUEST_SUCCESSFUL, routerPath)
	c.JSON(consts.StatusOK, resp)
}

// GetUserInfoByStuNum .
// @router /getLark [GET]
func GetUserInfoByStuNum(ctx context.Context, c *app.RequestContext) {
	routerPath := string(c.URI().Path())

	hlog.Debugf(log.ROUTE_PATH, routerPath)

	var err error
	var req user.GetUserInfoByStuNumReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := service.GetUserInfoByStuNum(ctx, c, &req)
	if err != nil {
		errCode.ResponseFailed(c)
		hlog.Warnf(log.REQUEST_FAILED+log.EXTRA_ERROR_INFO, routerPath, c.Errors.Last())
		return
	}

	hlog.Debugf(log.REQUEST_SUCCESSFUL, routerPath)
	c.JSON(consts.StatusOK, resp)
}
