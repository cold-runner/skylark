// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/cold-runner/skylark/internal/model"
)

func newLark(db *gorm.DB, opts ...gen.DOOption) lark {
	_lark := lark{}

	_lark.larkDo.UseDB(db, opts...)
	_lark.larkDo.UseModel(&model.Lark{})

	tableName := _lark.larkDo.TableName()
	_lark.ALL = field.NewAsterisk(tableName)
	_lark.ID = field.NewInt64(tableName, "id")
	_lark.CreatedAt = field.NewTime(tableName, "created_at")
	_lark.UpdatedAt = field.NewTime(tableName, "updated_at")
	_lark.DeletedAt = field.NewField(tableName, "deleted_at")
	_lark.StuNum = field.NewString(tableName, "stu_num")
	_lark.Name = field.NewString(tableName, "name")
	_lark.Password = field.NewString(tableName, "password")
	_lark.Gender = field.NewInt64(tableName, "gender")
	_lark.College = field.NewString(tableName, "college")
	_lark.Major = field.NewString(tableName, "major")
	_lark.Grade = field.NewString(tableName, "grade")
	_lark.StuCardURL = field.NewString(tableName, "stu_card_url")
	_lark.Phone = field.NewString(tableName, "phone")
	_lark.Province = field.NewString(tableName, "province")
	_lark.Age = field.NewInt64(tableName, "age")
	_lark.Birth = field.NewTime(tableName, "birth")
	_lark.PhotoURL = field.NewString(tableName, "photo_url")
	_lark.Email = field.NewString(tableName, "email")
	_lark.Introduce = field.NewString(tableName, "introduce")
	_lark.Avatar = field.NewString(tableName, "avatar")
	_lark.QqUnionID = field.NewString(tableName, "qq_union_id")
	_lark.WechatUnionID = field.NewString(tableName, "wechat_union_id")
	_lark.Legal = field.NewInt64(tableName, "legal")
	_lark.State = field.NewInt64(tableName, "state")

	_lark.fillFieldMap()

	return _lark
}

type lark struct {
	larkDo

	ALL           field.Asterisk
	ID            field.Int64
	CreatedAt     field.Time
	UpdatedAt     field.Time
	DeletedAt     field.Field
	StuNum        field.String
	Name          field.String
	Password      field.String
	Gender        field.Int64
	College       field.String
	Major         field.String
	Grade         field.String
	StuCardURL    field.String
	Phone         field.String
	Province      field.String
	Age           field.Int64
	Birth         field.Time
	PhotoURL      field.String
	Email         field.String
	Introduce     field.String
	Avatar        field.String
	QqUnionID     field.String
	WechatUnionID field.String
	Legal         field.Int64
	State         field.Int64

	fieldMap map[string]field.Expr
}

func (l lark) Table(newTableName string) *lark {
	l.larkDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l lark) As(alias string) *lark {
	l.larkDo.DO = *(l.larkDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *lark) updateTableName(table string) *lark {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewInt64(table, "id")
	l.CreatedAt = field.NewTime(table, "created_at")
	l.UpdatedAt = field.NewTime(table, "updated_at")
	l.DeletedAt = field.NewField(table, "deleted_at")
	l.StuNum = field.NewString(table, "stu_num")
	l.Name = field.NewString(table, "name")
	l.Password = field.NewString(table, "password")
	l.Gender = field.NewInt64(table, "gender")
	l.College = field.NewString(table, "college")
	l.Major = field.NewString(table, "major")
	l.Grade = field.NewString(table, "grade")
	l.StuCardURL = field.NewString(table, "stu_card_url")
	l.Phone = field.NewString(table, "phone")
	l.Province = field.NewString(table, "province")
	l.Age = field.NewInt64(table, "age")
	l.Birth = field.NewTime(table, "birth")
	l.PhotoURL = field.NewString(table, "photo_url")
	l.Email = field.NewString(table, "email")
	l.Introduce = field.NewString(table, "introduce")
	l.Avatar = field.NewString(table, "avatar")
	l.QqUnionID = field.NewString(table, "qq_union_id")
	l.WechatUnionID = field.NewString(table, "wechat_union_id")
	l.Legal = field.NewInt64(table, "legal")
	l.State = field.NewInt64(table, "state")

	l.fillFieldMap()

	return l
}

func (l *lark) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *lark) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 24)
	l.fieldMap["id"] = l.ID
	l.fieldMap["created_at"] = l.CreatedAt
	l.fieldMap["updated_at"] = l.UpdatedAt
	l.fieldMap["deleted_at"] = l.DeletedAt
	l.fieldMap["stu_num"] = l.StuNum
	l.fieldMap["name"] = l.Name
	l.fieldMap["password"] = l.Password
	l.fieldMap["gender"] = l.Gender
	l.fieldMap["college"] = l.College
	l.fieldMap["major"] = l.Major
	l.fieldMap["grade"] = l.Grade
	l.fieldMap["stu_card_url"] = l.StuCardURL
	l.fieldMap["phone"] = l.Phone
	l.fieldMap["province"] = l.Province
	l.fieldMap["age"] = l.Age
	l.fieldMap["birth"] = l.Birth
	l.fieldMap["photo_url"] = l.PhotoURL
	l.fieldMap["email"] = l.Email
	l.fieldMap["introduce"] = l.Introduce
	l.fieldMap["avatar"] = l.Avatar
	l.fieldMap["qq_union_id"] = l.QqUnionID
	l.fieldMap["wechat_union_id"] = l.WechatUnionID
	l.fieldMap["legal"] = l.Legal
	l.fieldMap["state"] = l.State
}

func (l lark) clone(db *gorm.DB) lark {
	l.larkDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l lark) replaceDB(db *gorm.DB) lark {
	l.larkDo.ReplaceDB(db)
	return l
}

type larkDo struct{ gen.DO }

type ILarkDo interface {
	gen.SubQuery
	Debug() ILarkDo
	WithContext(ctx context.Context) ILarkDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ILarkDo
	WriteDB() ILarkDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ILarkDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILarkDo
	Not(conds ...gen.Condition) ILarkDo
	Or(conds ...gen.Condition) ILarkDo
	Select(conds ...field.Expr) ILarkDo
	Where(conds ...gen.Condition) ILarkDo
	Order(conds ...field.Expr) ILarkDo
	Distinct(cols ...field.Expr) ILarkDo
	Omit(cols ...field.Expr) ILarkDo
	Join(table schema.Tabler, on ...field.Expr) ILarkDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILarkDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILarkDo
	Group(cols ...field.Expr) ILarkDo
	Having(conds ...gen.Condition) ILarkDo
	Limit(limit int) ILarkDo
	Offset(offset int) ILarkDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILarkDo
	Unscoped() ILarkDo
	Create(values ...*model.Lark) error
	CreateInBatches(values []*model.Lark, batchSize int) error
	Save(values ...*model.Lark) error
	First() (*model.Lark, error)
	Take() (*model.Lark, error)
	Last() (*model.Lark, error)
	Find() ([]*model.Lark, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Lark, err error)
	FindInBatches(result *[]*model.Lark, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Lark) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILarkDo
	Assign(attrs ...field.AssignExpr) ILarkDo
	Joins(fields ...field.RelationField) ILarkDo
	Preload(fields ...field.RelationField) ILarkDo
	FirstOrInit() (*model.Lark, error)
	FirstOrCreate() (*model.Lark, error)
	FindByPage(offset int, limit int) (result []*model.Lark, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILarkDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l larkDo) Debug() ILarkDo {
	return l.withDO(l.DO.Debug())
}

func (l larkDo) WithContext(ctx context.Context) ILarkDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l larkDo) ReadDB() ILarkDo {
	return l.Clauses(dbresolver.Read)
}

func (l larkDo) WriteDB() ILarkDo {
	return l.Clauses(dbresolver.Write)
}

func (l larkDo) Session(config *gorm.Session) ILarkDo {
	return l.withDO(l.DO.Session(config))
}

func (l larkDo) Clauses(conds ...clause.Expression) ILarkDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l larkDo) Returning(value interface{}, columns ...string) ILarkDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l larkDo) Not(conds ...gen.Condition) ILarkDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l larkDo) Or(conds ...gen.Condition) ILarkDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l larkDo) Select(conds ...field.Expr) ILarkDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l larkDo) Where(conds ...gen.Condition) ILarkDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l larkDo) Order(conds ...field.Expr) ILarkDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l larkDo) Distinct(cols ...field.Expr) ILarkDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l larkDo) Omit(cols ...field.Expr) ILarkDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l larkDo) Join(table schema.Tabler, on ...field.Expr) ILarkDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l larkDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILarkDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l larkDo) RightJoin(table schema.Tabler, on ...field.Expr) ILarkDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l larkDo) Group(cols ...field.Expr) ILarkDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l larkDo) Having(conds ...gen.Condition) ILarkDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l larkDo) Limit(limit int) ILarkDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l larkDo) Offset(offset int) ILarkDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l larkDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILarkDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l larkDo) Unscoped() ILarkDo {
	return l.withDO(l.DO.Unscoped())
}

func (l larkDo) Create(values ...*model.Lark) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l larkDo) CreateInBatches(values []*model.Lark, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l larkDo) Save(values ...*model.Lark) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l larkDo) First() (*model.Lark, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lark), nil
	}
}

func (l larkDo) Take() (*model.Lark, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lark), nil
	}
}

func (l larkDo) Last() (*model.Lark, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lark), nil
	}
}

func (l larkDo) Find() ([]*model.Lark, error) {
	result, err := l.DO.Find()
	return result.([]*model.Lark), err
}

func (l larkDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Lark, err error) {
	buf := make([]*model.Lark, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l larkDo) FindInBatches(result *[]*model.Lark, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l larkDo) Attrs(attrs ...field.AssignExpr) ILarkDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l larkDo) Assign(attrs ...field.AssignExpr) ILarkDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l larkDo) Joins(fields ...field.RelationField) ILarkDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l larkDo) Preload(fields ...field.RelationField) ILarkDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l larkDo) FirstOrInit() (*model.Lark, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lark), nil
	}
}

func (l larkDo) FirstOrCreate() (*model.Lark, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lark), nil
	}
}

func (l larkDo) FindByPage(offset int, limit int) (result []*model.Lark, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l larkDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l larkDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l larkDo) Delete(models ...*model.Lark) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *larkDo) withDO(do gen.Dao) *larkDo {
	l.DO = *do.(*gen.DO)
	return l
}
