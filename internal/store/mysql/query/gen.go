// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q            = new(Query)
	Categorie    *categorie
	Comment      *comment
	Draft        *draft
	Lark         *lark
	LearningPost *learningPost
	Plate        *plate
	Tag          *tag
	Topic        *topic
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Categorie = &Q.Categorie
	Comment = &Q.Comment
	Draft = &Q.Draft
	Lark = &Q.Lark
	LearningPost = &Q.LearningPost
	Plate = &Q.Plate
	Tag = &Q.Tag
	Topic = &Q.Topic
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:           db,
		Categorie:    newCategorie(db, opts...),
		Comment:      newComment(db, opts...),
		Draft:        newDraft(db, opts...),
		Lark:         newLark(db, opts...),
		LearningPost: newLearningPost(db, opts...),
		Plate:        newPlate(db, opts...),
		Tag:          newTag(db, opts...),
		Topic:        newTopic(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Categorie    categorie
	Comment      comment
	Draft        draft
	Lark         lark
	LearningPost learningPost
	Plate        plate
	Tag          tag
	Topic        topic
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:           db,
		Categorie:    q.Categorie.clone(db),
		Comment:      q.Comment.clone(db),
		Draft:        q.Draft.clone(db),
		Lark:         q.Lark.clone(db),
		LearningPost: q.LearningPost.clone(db),
		Plate:        q.Plate.clone(db),
		Tag:          q.Tag.clone(db),
		Topic:        q.Topic.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:           db,
		Categorie:    q.Categorie.replaceDB(db),
		Comment:      q.Comment.replaceDB(db),
		Draft:        q.Draft.replaceDB(db),
		Lark:         q.Lark.replaceDB(db),
		LearningPost: q.LearningPost.replaceDB(db),
		Plate:        q.Plate.replaceDB(db),
		Tag:          q.Tag.replaceDB(db),
		Topic:        q.Topic.replaceDB(db),
	}
}

type queryCtx struct {
	Categorie    ICategorieDo
	Comment      ICommentDo
	Draft        IDraftDo
	Lark         ILarkDo
	LearningPost ILearningPostDo
	Plate        IPlateDo
	Tag          ITagDo
	Topic        ITopicDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Categorie:    q.Categorie.WithContext(ctx),
		Comment:      q.Comment.WithContext(ctx),
		Draft:        q.Draft.WithContext(ctx),
		Lark:         q.Lark.WithContext(ctx),
		LearningPost: q.LearningPost.WithContext(ctx),
		Plate:        q.Plate.WithContext(ctx),
		Tag:          q.Tag.WithContext(ctx),
		Topic:        q.Topic.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
