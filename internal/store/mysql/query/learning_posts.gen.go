// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/cold-runner/skylark/internal/model"
)

func newLearningPost(db *gorm.DB, opts ...gen.DOOption) learningPost {
	_learningPost := learningPost{}

	_learningPost.learningPostDo.UseDB(db, opts...)
	_learningPost.learningPostDo.UseModel(&model.LearningPost{})

	tableName := _learningPost.learningPostDo.TableName()
	_learningPost.ALL = field.NewAsterisk(tableName)
	_learningPost.Title = field.NewString(tableName, "title")
	_learningPost.PictureURL = field.NewString(tableName, "picture_url")
	_learningPost.UserID = field.NewInt64(tableName, "user_id")
	_learningPost.Summary = field.NewString(tableName, "summary")
	_learningPost.Content = field.NewString(tableName, "content")
	_learningPost.IsDraft = field.NewInt64(tableName, "is_draft")
	_learningPost.Theme = field.NewString(tableName, "theme")
	_learningPost.Tag = field.NewString(tableName, "tag")
	_learningPost.ID = field.NewInt64(tableName, "id")
	_learningPost.CreatedAt = field.NewTime(tableName, "created_at")
	_learningPost.UpdatedAt = field.NewTime(tableName, "updated_at")
	_learningPost.DeletedAt = field.NewField(tableName, "deleted_at")
	_learningPost.Temperature = field.NewInt64(tableName, "temperature")
	_learningPost.Like = field.NewInt64(tableName, "like")
	_learningPost.Watch = field.NewInt64(tableName, "watch")
	_learningPost.Star = field.NewInt64(tableName, "star")
	_learningPost.Pass = field.NewInt64(tableName, "pass")
	_learningPost.Report = field.NewInt64(tableName, "report")

	_learningPost.fillFieldMap()

	return _learningPost
}

type learningPost struct {
	learningPostDo

	ALL         field.Asterisk
	Title       field.String
	PictureURL  field.String
	UserID      field.Int64
	Summary     field.String
	Content     field.String
	IsDraft     field.Int64
	Theme       field.String
	Tag         field.String
	ID          field.Int64
	CreatedAt   field.Time
	UpdatedAt   field.Time
	DeletedAt   field.Field
	Temperature field.Int64
	Like        field.Int64
	Watch       field.Int64
	Star        field.Int64
	Pass        field.Int64
	Report      field.Int64

	fieldMap map[string]field.Expr
}

func (l learningPost) Table(newTableName string) *learningPost {
	l.learningPostDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l learningPost) As(alias string) *learningPost {
	l.learningPostDo.DO = *(l.learningPostDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *learningPost) updateTableName(table string) *learningPost {
	l.ALL = field.NewAsterisk(table)
	l.Title = field.NewString(table, "title")
	l.PictureURL = field.NewString(table, "picture_url")
	l.UserID = field.NewInt64(table, "user_id")
	l.Summary = field.NewString(table, "summary")
	l.Content = field.NewString(table, "content")
	l.IsDraft = field.NewInt64(table, "is_draft")
	l.Theme = field.NewString(table, "theme")
	l.Tag = field.NewString(table, "tag")
	l.ID = field.NewInt64(table, "id")
	l.CreatedAt = field.NewTime(table, "created_at")
	l.UpdatedAt = field.NewTime(table, "updated_at")
	l.DeletedAt = field.NewField(table, "deleted_at")
	l.Temperature = field.NewInt64(table, "temperature")
	l.Like = field.NewInt64(table, "like")
	l.Watch = field.NewInt64(table, "watch")
	l.Star = field.NewInt64(table, "star")
	l.Pass = field.NewInt64(table, "pass")
	l.Report = field.NewInt64(table, "report")

	l.fillFieldMap()

	return l
}

func (l *learningPost) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *learningPost) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 18)
	l.fieldMap["title"] = l.Title
	l.fieldMap["picture_url"] = l.PictureURL
	l.fieldMap["user_id"] = l.UserID
	l.fieldMap["summary"] = l.Summary
	l.fieldMap["content"] = l.Content
	l.fieldMap["is_draft"] = l.IsDraft
	l.fieldMap["theme"] = l.Theme
	l.fieldMap["tag"] = l.Tag
	l.fieldMap["id"] = l.ID
	l.fieldMap["created_at"] = l.CreatedAt
	l.fieldMap["updated_at"] = l.UpdatedAt
	l.fieldMap["deleted_at"] = l.DeletedAt
	l.fieldMap["temperature"] = l.Temperature
	l.fieldMap["like"] = l.Like
	l.fieldMap["watch"] = l.Watch
	l.fieldMap["star"] = l.Star
	l.fieldMap["pass"] = l.Pass
	l.fieldMap["report"] = l.Report
}

func (l learningPost) clone(db *gorm.DB) learningPost {
	l.learningPostDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l learningPost) replaceDB(db *gorm.DB) learningPost {
	l.learningPostDo.ReplaceDB(db)
	return l
}

type learningPostDo struct{ gen.DO }

type ILearningPostDo interface {
	gen.SubQuery
	Debug() ILearningPostDo
	WithContext(ctx context.Context) ILearningPostDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ILearningPostDo
	WriteDB() ILearningPostDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ILearningPostDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILearningPostDo
	Not(conds ...gen.Condition) ILearningPostDo
	Or(conds ...gen.Condition) ILearningPostDo
	Select(conds ...field.Expr) ILearningPostDo
	Where(conds ...gen.Condition) ILearningPostDo
	Order(conds ...field.Expr) ILearningPostDo
	Distinct(cols ...field.Expr) ILearningPostDo
	Omit(cols ...field.Expr) ILearningPostDo
	Join(table schema.Tabler, on ...field.Expr) ILearningPostDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILearningPostDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILearningPostDo
	Group(cols ...field.Expr) ILearningPostDo
	Having(conds ...gen.Condition) ILearningPostDo
	Limit(limit int) ILearningPostDo
	Offset(offset int) ILearningPostDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILearningPostDo
	Unscoped() ILearningPostDo
	Create(values ...*model.LearningPost) error
	CreateInBatches(values []*model.LearningPost, batchSize int) error
	Save(values ...*model.LearningPost) error
	First() (*model.LearningPost, error)
	Take() (*model.LearningPost, error)
	Last() (*model.LearningPost, error)
	Find() ([]*model.LearningPost, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LearningPost, err error)
	FindInBatches(result *[]*model.LearningPost, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.LearningPost) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILearningPostDo
	Assign(attrs ...field.AssignExpr) ILearningPostDo
	Joins(fields ...field.RelationField) ILearningPostDo
	Preload(fields ...field.RelationField) ILearningPostDo
	FirstOrInit() (*model.LearningPost, error)
	FirstOrCreate() (*model.LearningPost, error)
	FindByPage(offset int, limit int) (result []*model.LearningPost, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILearningPostDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l learningPostDo) Debug() ILearningPostDo {
	return l.withDO(l.DO.Debug())
}

func (l learningPostDo) WithContext(ctx context.Context) ILearningPostDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l learningPostDo) ReadDB() ILearningPostDo {
	return l.Clauses(dbresolver.Read)
}

func (l learningPostDo) WriteDB() ILearningPostDo {
	return l.Clauses(dbresolver.Write)
}

func (l learningPostDo) Session(config *gorm.Session) ILearningPostDo {
	return l.withDO(l.DO.Session(config))
}

func (l learningPostDo) Clauses(conds ...clause.Expression) ILearningPostDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l learningPostDo) Returning(value interface{}, columns ...string) ILearningPostDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l learningPostDo) Not(conds ...gen.Condition) ILearningPostDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l learningPostDo) Or(conds ...gen.Condition) ILearningPostDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l learningPostDo) Select(conds ...field.Expr) ILearningPostDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l learningPostDo) Where(conds ...gen.Condition) ILearningPostDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l learningPostDo) Order(conds ...field.Expr) ILearningPostDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l learningPostDo) Distinct(cols ...field.Expr) ILearningPostDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l learningPostDo) Omit(cols ...field.Expr) ILearningPostDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l learningPostDo) Join(table schema.Tabler, on ...field.Expr) ILearningPostDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l learningPostDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILearningPostDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l learningPostDo) RightJoin(table schema.Tabler, on ...field.Expr) ILearningPostDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l learningPostDo) Group(cols ...field.Expr) ILearningPostDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l learningPostDo) Having(conds ...gen.Condition) ILearningPostDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l learningPostDo) Limit(limit int) ILearningPostDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l learningPostDo) Offset(offset int) ILearningPostDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l learningPostDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILearningPostDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l learningPostDo) Unscoped() ILearningPostDo {
	return l.withDO(l.DO.Unscoped())
}

func (l learningPostDo) Create(values ...*model.LearningPost) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l learningPostDo) CreateInBatches(values []*model.LearningPost, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l learningPostDo) Save(values ...*model.LearningPost) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l learningPostDo) First() (*model.LearningPost, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.LearningPost), nil
	}
}

func (l learningPostDo) Take() (*model.LearningPost, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.LearningPost), nil
	}
}

func (l learningPostDo) Last() (*model.LearningPost, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.LearningPost), nil
	}
}

func (l learningPostDo) Find() ([]*model.LearningPost, error) {
	result, err := l.DO.Find()
	return result.([]*model.LearningPost), err
}

func (l learningPostDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LearningPost, err error) {
	buf := make([]*model.LearningPost, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l learningPostDo) FindInBatches(result *[]*model.LearningPost, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l learningPostDo) Attrs(attrs ...field.AssignExpr) ILearningPostDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l learningPostDo) Assign(attrs ...field.AssignExpr) ILearningPostDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l learningPostDo) Joins(fields ...field.RelationField) ILearningPostDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l learningPostDo) Preload(fields ...field.RelationField) ILearningPostDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l learningPostDo) FirstOrInit() (*model.LearningPost, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.LearningPost), nil
	}
}

func (l learningPostDo) FirstOrCreate() (*model.LearningPost, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.LearningPost), nil
	}
}

func (l learningPostDo) FindByPage(offset int, limit int) (result []*model.LearningPost, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l learningPostDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l learningPostDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l learningPostDo) Delete(models ...*model.LearningPost) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *learningPostDo) withDO(do gen.Dao) *learningPostDo {
	l.DO = *do.(*gen.DO)
	return l
}
