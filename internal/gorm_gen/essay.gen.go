// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gorm_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/cold-runner/skylark/internal/model"
)

func newEssay(db *gorm.DB, opts ...gen.DOOption) essay {
	_essay := essay{}

	_essay.essayDo.UseDB(db, opts...)
	_essay.essayDo.UseModel(&model.Essay{})

	tableName := _essay.essayDo.TableName()
	_essay.ALL = field.NewAsterisk(tableName)
	_essay.ID = field.NewInt64(tableName, "id")
	_essay.CreatedAt = field.NewTime(tableName, "created_at")
	_essay.DeletedAt = field.NewField(tableName, "deleted_at")
	_essay.UpdatedAt = field.NewTime(tableName, "updated_at")
	_essay.Content = field.NewString(tableName, "content")
	_essay.TopicID = field.NewInt64(tableName, "topic_id")
	_essay.UserID = field.NewInt64(tableName, "user_id")
	_essay.Temperature = field.NewInt64(tableName, "temperature")
	_essay.Click = field.NewInt64(tableName, "click")

	_essay.fillFieldMap()

	return _essay
}

type essay struct {
	essayDo

	ALL         field.Asterisk
	ID          field.Int64  // 自然主键
	CreatedAt   field.Time   // 创建时间
	DeletedAt   field.Field  // 删除时间（软删除）
	UpdatedAt   field.Time   // 更新时间
	Content     field.String // 随笔内容
	TopicID     field.Int64  // 所属话题
	UserID      field.Int64  // 随笔作者（考虑性能，不加外键）
	Temperature field.Int64  // 随笔热度（排序时用）
	Click       field.Int64  // 点击量（计算热度时用）

	fieldMap map[string]field.Expr
}

func (e essay) Table(newTableName string) *essay {
	e.essayDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e essay) As(alias string) *essay {
	e.essayDo.DO = *(e.essayDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *essay) updateTableName(table string) *essay {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt64(table, "id")
	e.CreatedAt = field.NewTime(table, "created_at")
	e.DeletedAt = field.NewField(table, "deleted_at")
	e.UpdatedAt = field.NewTime(table, "updated_at")
	e.Content = field.NewString(table, "content")
	e.TopicID = field.NewInt64(table, "topic_id")
	e.UserID = field.NewInt64(table, "user_id")
	e.Temperature = field.NewInt64(table, "temperature")
	e.Click = field.NewInt64(table, "click")

	e.fillFieldMap()

	return e
}

func (e *essay) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *essay) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 9)
	e.fieldMap["id"] = e.ID
	e.fieldMap["created_at"] = e.CreatedAt
	e.fieldMap["deleted_at"] = e.DeletedAt
	e.fieldMap["updated_at"] = e.UpdatedAt
	e.fieldMap["content"] = e.Content
	e.fieldMap["topic_id"] = e.TopicID
	e.fieldMap["user_id"] = e.UserID
	e.fieldMap["temperature"] = e.Temperature
	e.fieldMap["click"] = e.Click
}

func (e essay) clone(db *gorm.DB) essay {
	e.essayDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e essay) replaceDB(db *gorm.DB) essay {
	e.essayDo.ReplaceDB(db)
	return e
}

type essayDo struct{ gen.DO }

type IEssayDo interface {
	gen.SubQuery
	Debug() IEssayDo
	WithContext(ctx context.Context) IEssayDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEssayDo
	WriteDB() IEssayDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEssayDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEssayDo
	Not(conds ...gen.Condition) IEssayDo
	Or(conds ...gen.Condition) IEssayDo
	Select(conds ...field.Expr) IEssayDo
	Where(conds ...gen.Condition) IEssayDo
	Order(conds ...field.Expr) IEssayDo
	Distinct(cols ...field.Expr) IEssayDo
	Omit(cols ...field.Expr) IEssayDo
	Join(table schema.Tabler, on ...field.Expr) IEssayDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEssayDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEssayDo
	Group(cols ...field.Expr) IEssayDo
	Having(conds ...gen.Condition) IEssayDo
	Limit(limit int) IEssayDo
	Offset(offset int) IEssayDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEssayDo
	Unscoped() IEssayDo
	Create(values ...*model.Essay) error
	CreateInBatches(values []*model.Essay, batchSize int) error
	Save(values ...*model.Essay) error
	First() (*model.Essay, error)
	Take() (*model.Essay, error)
	Last() (*model.Essay, error)
	Find() ([]*model.Essay, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Essay, err error)
	FindInBatches(result *[]*model.Essay, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Essay) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEssayDo
	Assign(attrs ...field.AssignExpr) IEssayDo
	Joins(fields ...field.RelationField) IEssayDo
	Preload(fields ...field.RelationField) IEssayDo
	FirstOrInit() (*model.Essay, error)
	FirstOrCreate() (*model.Essay, error)
	FindByPage(offset int, limit int) (result []*model.Essay, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEssayDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e essayDo) Debug() IEssayDo {
	return e.withDO(e.DO.Debug())
}

func (e essayDo) WithContext(ctx context.Context) IEssayDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e essayDo) ReadDB() IEssayDo {
	return e.Clauses(dbresolver.Read)
}

func (e essayDo) WriteDB() IEssayDo {
	return e.Clauses(dbresolver.Write)
}

func (e essayDo) Session(config *gorm.Session) IEssayDo {
	return e.withDO(e.DO.Session(config))
}

func (e essayDo) Clauses(conds ...clause.Expression) IEssayDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e essayDo) Returning(value interface{}, columns ...string) IEssayDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e essayDo) Not(conds ...gen.Condition) IEssayDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e essayDo) Or(conds ...gen.Condition) IEssayDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e essayDo) Select(conds ...field.Expr) IEssayDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e essayDo) Where(conds ...gen.Condition) IEssayDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e essayDo) Order(conds ...field.Expr) IEssayDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e essayDo) Distinct(cols ...field.Expr) IEssayDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e essayDo) Omit(cols ...field.Expr) IEssayDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e essayDo) Join(table schema.Tabler, on ...field.Expr) IEssayDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e essayDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEssayDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e essayDo) RightJoin(table schema.Tabler, on ...field.Expr) IEssayDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e essayDo) Group(cols ...field.Expr) IEssayDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e essayDo) Having(conds ...gen.Condition) IEssayDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e essayDo) Limit(limit int) IEssayDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e essayDo) Offset(offset int) IEssayDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e essayDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEssayDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e essayDo) Unscoped() IEssayDo {
	return e.withDO(e.DO.Unscoped())
}

func (e essayDo) Create(values ...*model.Essay) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e essayDo) CreateInBatches(values []*model.Essay, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e essayDo) Save(values ...*model.Essay) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e essayDo) First() (*model.Essay, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Essay), nil
	}
}

func (e essayDo) Take() (*model.Essay, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Essay), nil
	}
}

func (e essayDo) Last() (*model.Essay, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Essay), nil
	}
}

func (e essayDo) Find() ([]*model.Essay, error) {
	result, err := e.DO.Find()
	return result.([]*model.Essay), err
}

func (e essayDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Essay, err error) {
	buf := make([]*model.Essay, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e essayDo) FindInBatches(result *[]*model.Essay, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e essayDo) Attrs(attrs ...field.AssignExpr) IEssayDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e essayDo) Assign(attrs ...field.AssignExpr) IEssayDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e essayDo) Joins(fields ...field.RelationField) IEssayDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e essayDo) Preload(fields ...field.RelationField) IEssayDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e essayDo) FirstOrInit() (*model.Essay, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Essay), nil
	}
}

func (e essayDo) FirstOrCreate() (*model.Essay, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Essay), nil
	}
}

func (e essayDo) FindByPage(offset int, limit int) (result []*model.Essay, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e essayDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e essayDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e essayDo) Delete(models ...*model.Essay) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *essayDo) withDO(do gen.Dao) *essayDo {
	e.DO = *do.(*gen.DO)
	return e
}
